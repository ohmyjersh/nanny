{"version":3,"file":"ConfigurationHandler.js","sourceRoot":"","sources":["../../src/handlers/ConfigurationHandler.ts"],"names":[],"mappings":";AAAA,iFAA4E;AAQ5E;IAGI;QACI,IAAI,CAAC,wBAAwB,GAAG,IAAI,oCAAuB,EAAE,CAAC;IAClE,CAAC;IAED,qCAAM,GAAN,UAAQ,IAAyB,EAAE,QAA2C;QAC1E,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACzD,CAAC;IAED,uCAAQ,GAAR,UAAU,QAA2C;QAChD,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,qCAAM,GAAN,UAAQ,GAAW,EAAE,IAAyB,EAAE,QAA2C;QAA3F,iBASC;QAPG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG;YACjD,EAAE,CAAA,CAAC,GAAG,CAAC;gBAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAE3B,IAAI;gBACA,KAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAElE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qCAAM,GAAN,UAAQ,GAAW,EAAE,QAA0C;QAC3D,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,GAAG,EAAG,QAAQ,CAAC,CAAC;IACzD,CAAC;IAED,uCAAQ,GAAR,UAAU,GAAW,EAAE,QAA2D;QAC9E,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAC;IA4CL,2BAAC;AAAD,CAAC,AA5ED,IA4EC;AAED,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;;AAClC,qBAAe,oBAAoB,CAAC","sourcesContent":["import ConfigurationRepository from \"../repository/ConfigurationRepository\";\nimport BaseHandler = require(\"./BaseHandler\");\nimport IConfigurationModel from \"../models/interfaces/IConfigurationModel\";\nimport ConfigurationModel = require(\"../models/ConfigurationModel\");\n\ninterface IConfigurationHandler extends BaseHandler<IConfigurationModel> {\n}\n\nclass ConfigurationHandler implements IConfigurationHandler {\n    private _configurationRepository: ConfigurationRepository;\n    \n    constructor () {\n        this._configurationRepository = new ConfigurationRepository();\n    }  \n        \n    create (item: IConfigurationModel, callback: (error: any, result: any) => void) {\n        this._configurationRepository.create(item, callback);   \n    }\n   \n    retrieve (callback: (error: any, result: any) => void) {\n         this._configurationRepository.retrieve(callback);\n    }\n    \n    update (_id: string, item: IConfigurationModel, callback: (error: any, result: any) => void) {\n        \n        this._configurationRepository.findById(_id, (err, res) => {\n            if(err) callback(err, res);\n            \n            else \n                this._configurationRepository.update(_id, item, callback);\n               \n        });    \n    }\n    \n    delete (_id: string, callback:(error: any, result: any) => void) {\n        this._configurationRepository.delete(_id , callback);\n    }\n    \n    findById (_id: string, callback: (error: any, result: IConfigurationModel) => void) {\n        this._configurationRepository.findById(_id, callback);\n    }\n        // async getConfigurationByManfiest(configurations:any, transforms:any, flatten:boolean = false){\n    //     let configs = {\n    //         validationErrors:[]\n    //     }\n    //     for(let config in configurations) {\n    //         try {\n    //             let result = await this.getConfiguraton(configurations[config]);\n    //             var newObject = {};\n    //             if(result.length === 0) {\n    //                 configs.validationErrors.push(`${config} does not exist`);\n    //             }\n    //             else {\n    //                 result[0].configurations.forEach(x => {\n    //                     var configKey = Object.keys(x)[0];\n    //                     let transformed = this.transformConfigData(x[configKey],transforms);\n\n    //                     if(flatten) {\n    //                         newObject[configKey]= transformed;\n    //                     }\n    //                     else {\n    //                         newObject[config] = {[configKey]: transformed};\n    //                     }\n    //                 });\n    //             }\n    //             Object.assign(configs, newObject);\n    //         }\n    //     catch(e) {\n    //         console.log(e);\n    //     }\n\n    //     Object.assign(configs, newObject);\n    //     }\n    //     return configs;\n    // }\n\n    // async getConfiguraton(name:string) {\n    //     return await this.dataHandler.getData(name, \"configurations\");\n    // }\n\n    // private transformConfigData(config: string, transformer: Object) {\n    //     return format(config, transformer);\n    // }\n    \n}\n\nObject.seal(ConfigurationHandler);\nexport default ConfigurationHandler;"]}