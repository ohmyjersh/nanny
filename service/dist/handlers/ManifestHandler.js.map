{"version":3,"file":"ManifestHandler.js","sourceRoot":"","sources":["../../src/handlers/ManifestHandler.ts"],"names":[],"mappings":";AAAA,uEAAkE;AAQlE;IAGI;QACI,IAAI,CAAC,mBAAmB,GAAG,IAAI,+BAAkB,EAAE,CAAC;IACxD,CAAC;IAED,gCAAM,GAAN,UAAQ,IAAoB,EAAE,QAA2C;QACrE,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED,kCAAQ,GAAR,UAAU,QAA2C;QAChD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED,gCAAM,GAAN,UAAQ,GAAW,EAAE,IAAoB,EAAE,QAA2C;QAAtF,iBASC;QAPG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG;YAC5C,EAAE,CAAA,CAAC,GAAG,CAAC;gBAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAE3B,IAAI;gBACA,KAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAE7D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gCAAM,GAAN,UAAQ,GAAW,EAAE,QAA0C;QAC3D,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,EAAG,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED,kCAAQ,GAAR,UAAU,GAAW,EAAE,QAAsD;QACzE,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACrD,CAAC;IACL,sBAAC;AAAD,CAAC,AAjCD,IAiCC;AAED,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;;AAC7B,qBAAe,eAAe,CAAC","sourcesContent":["import ManifestRepository from \"../repository/ManifestRepository\";\nimport BaseHandler = require(\"./BaseHandler\");\nimport IManifestModel from \"../models/interfaces/IManifestModel\";\nimport ManifestModel = require(\"../models/ManifestModel\");\n\ninterface IManifestHandler extends BaseHandler<IManifestModel> {\n}\n\nclass ManifestHandler implements IManifestHandler {\n    private _manifestRepository: ManifestRepository;\n    \n    constructor () {\n        this._manifestRepository = new ManifestRepository();\n    }  \n        \n    create (item: IManifestModel, callback: (error: any, result: any) => void) {\n        this._manifestRepository.create(item, callback);   \n    }\n   \n    retrieve (callback: (error: any, result: any) => void) {\n         this._manifestRepository.retrieve(callback);\n    }\n    \n    update (_id: string, item: IManifestModel, callback: (error: any, result: any) => void) {\n        \n        this._manifestRepository.findById(_id, (err, res) => {\n            if(err) callback(err, res);\n            \n            else \n                this._manifestRepository.update(_id, item, callback);\n               \n        });    \n    }\n    \n    delete (_id: string, callback:(error: any, result: any) => void) {\n        this._manifestRepository.delete(_id , callback);\n    }\n    \n    findById (_id: string, callback: (error: any, result: IManifestModel) => void) {\n        this._manifestRepository.findById(_id, callback);\n    }\n}\n\nObject.seal(ManifestHandler);\nexport default ManifestHandler;"]}