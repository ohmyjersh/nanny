{"version":3,"file":"BaseRepository.js","sourceRoot":"","sources":["../../src/repository/BaseRepository.ts"],"names":[],"mappings":";AAAA,mCAAqC;AAIrC;IAIE,wBAAY,WAA8C;QACxD,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;IAC5B,CAAC;IAED,+BAAM,GAAN,UAAO,IAAO,EAAE,QAAyC;QACvD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,iCAAQ,GAAR,UAAS,QAAyC;QAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED,+BAAM,GAAN,UAAO,GAAU,EAAE,IAAO,EAAE,QAA2C;QACrE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACpE,CAAC;IAED,+BAAM,GAAN,UAAO,GAAW,EAAE,QAA2C;QAC7D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,UAAC,GAAG,IAAK,OAAA,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,EAAnB,CAAmB,CAAC,CAAC;IAClF,CAAC;IAED,iCAAQ,GAAR,UAAS,GAAW,EAAE,QAAyC;QAC7D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED,gCAAO,GAAP,UAAQ,IAAa,EAAE,QAAqC;QAC1D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED,6BAAI,GAAJ,UAAK,IAAa,EAAE,MAAe,EAAE,OAAgB,EAAE,QAAuC;QAC5F,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IAEO,mCAAU,GAAlB,UAAmB,GAAW;QAC5B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;IAC1D,CAAC;IAEH,qBAAC;AAAD,CAAC,AAxCD,IAwCC;;AAxCD,oCAwCC","sourcesContent":["import * as mongoose from 'mongoose';\nimport IRead = require(\"./interfaces/Read\");\nimport IWrite = require(\"./interfaces/Write\");\n\nexport default class RepositoryBase <T extends mongoose.Document> implements IRead<T>, IWrite<T> {\n\n  private _model: mongoose.Model<mongoose.Document>;\n\n  constructor(schemaModel: mongoose.Model<mongoose.Document>) {\n    this._model = schemaModel;\n  }\n\n  create(item: T, callback: (error: any, result: T) => void) {\n    this._model.create(item, callback);\n  }\n\n  retrieve(callback: (error: any, result: T) => void) {\n    this._model.find({}, callback);\n  }\n\n  update(_id:string, item: T, callback: (error: any, result: any) => void) {\n    this._model.update({ _id: this.toObjectId(_id) }, item, callback);\n  }\n\n  delete(_id: string, callback: (error: any, result: any) => void) {\n    this._model.remove({ _id: this.toObjectId(_id) }, (err) => callback(err, null));\n  }\n\n  findById(_id: string, callback: (error: any, result: T) => void) {\n    this._model.findById(_id, callback);\n  }\n\n  findOne(cond?: Object, callback?: (err: any, res: T) => void): mongoose.Query<T> {\n    return this._model.findOne(cond, callback);\n  }\n\n  find(cond?: Object, fields?: Object, options?: Object, callback?: (err: any, res: T[]) => void): mongoose.Query<T[]> {\n    return this._model.find(cond, options, callback);\n  }\n\n  private toObjectId(_id: string): mongoose.Types.ObjectId {\n    return mongoose.Types.ObjectId.createFromHexString(_id);\n  }\n\n}"]}